/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/

module.exports = {
    root: true,
    // parser: '@typescript-eslint/parser',
    // parserOptions: {
    //     ecmaVersion: 6,
    //     project: 'tsconfig.json',
    //     tsconfigRootDir: __dirname
    //     // sourceType: module
    //     // ecmaFeatures: {
    //     //  modules: true
    //     // }
    // },
    env: {
        browser: true,
        es6: true,
        node: true
        // 'jest/globals': true
    },
    plugins: [
        // '@typescript-eslint',
        /* '@angular-eslint', */
        '@angular-eslint',
        'eslint-comments',
        'import',
        'jest',
        'prettier',
        'jsdoc',
        'prefer-arrow'
    ],
    extends: ['plugin:@angular-eslint/recommended'],
    // TODO: TODO: TODO: TODO:
    // look here, espec under "Special rules": https://github.com/prettier/eslint-config-prettier/blob/master/README.md
    // when all is good, turn on --fix in the angular.json config for eslint
    // all the .eslintrc.js files are problems now b/c i removed "**/.eslintrc.js" from .eslintignore
    // also, adding "**/*.js" to .eslintignore fixes all the "did not include" errors...
    // either do that ^^^ OR figure out what can be done with the eslint "parserOptions"
    //
    /* overrides: [
        {
            files: ['*.component.ts'],
            parser: '@typescript-eslint/parser',
            parserOptions: {
                ecmaVersion: 2020,
                sourceType: 'module'
            },
            plugins: ['@angular-eslint/template'],
            processor: '@angular-eslint/template/extract-inline-html'
        }
    ], */

    //   override: [
    //     {
    //       files: ['**/*.spec.ts'],
    //       extends: [
    //         'plugin:jest/recommended',
    //         'plugin:jest/style'
    //       ],
    //       rules: {
    //         'jest/no-disabled-tests': 'warn',
    //         'jest/no-focused-tests': 'error',
    //         'jest/no-identical-title': 'error',
    //         'jest/prefer-to-have-length': 'warn',
    //         'jest/valid-expect': 'error'
    //       }
    //   }
    // ],

    // settings: {
    //     jsdoc: {
    //         mode: 'typescript'
    //     }
    // },
    overrides: [
        {
            files: ['*.ts', '*.js'],
            extends: [
                'eslint:recommended',
                /* 'plugin:@typescript-eslint/recommended',
                'plugin:@typescript-eslint/recommended-requiring-type-checking',
                'plugin:@angular-eslint/recommended', */
                'prettier',
                /* 'prettier/@typescript-eslint', */
                // config prettier???
                'plugin:prettier/recommended',
                'plugin:eslint-comments/recommended',
                'plugin:import/recommended',
                /* 'plugin:import/typescript', */
                'plugin:jsdoc/recommended'
                // 'plugin:jest/recommended',
                // 'plugin:jest/style'
            ],
            reportUnusedDisableDirectives: true,
            rules: {
                // 'no-empty': 'error',
                // TODO: ^^^ should be included with eslint:recommended, but not working!
                'eslint-comments/no-unused-disable': 'error',
                // 'jest/no-disabled-tests': 'warn',
                // 'jest/no-focused-tests': 'error',
                // 'jest/no-identical-title': 'error',
                // 'jest/prefer-to-have-length': 'warn',
                // 'jest/valid-expect': 'error',
                /*
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/array-type': ['error', { default: 'array', readonly: 'array' }],
                '@typescript-eslint/ban-types': [
                    'error',
                    {
                        types: {
                            // eslint-disable-next-line @typescript-eslint/naming-convention
                            Object: {
                                message: 'Avoid using the `Object` type. Did you mean `object`?'
                            },
                            // eslint-disable-next-line @typescript-eslint/naming-convention
                            Function: {
                                message: 'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.'
                            },
                            // eslint-disable-next-line id-blacklist, @typescript-eslint/naming-convention
                            Boolean: {
                                message: 'Avoid using the `Boolean` type. Did you mean `boolean`?'
                            },
                            // eslint-disable-next-line id-blacklist, @typescript-eslint/naming-convention
                            Number: {
                                message: 'Avoid using the `Number` type. Did you mean `number`?'
                            },
                            // eslint-disable-next-line id-blacklist, @typescript-eslint/naming-convention
                            String: {
                                message: 'Avoid using the `String` type. Did you mean `string`?'
                            },
                            // eslint-disable-next-line @typescript-eslint/naming-convention
                            Symbol: {
                                message: 'Avoid using the `Symbol` type. Did you mean `symbol`?'
                            }
                        }
                    }
                ],
                '@typescript-eslint/consistent-type-assertions': 'error',
                '@typescript-eslint/consistent-type-definitions': 'error',
                '@typescript-eslint/dot-notation': 'error',
                '@typescript-eslint/explicit-member-accessibility': [
                    'error',
                    {
                        accessibility: 'explicit',
                        overrides: {
                            constructors: 'no-public'
                        }
                    }
                ],
                // '@typescript-eslint/indent': [
                //   'warn',
                //   2,
                //   {
                //     FunctionDeclaration: {
                //       parameters: 'first'
                //     },
                //     FunctionExpression: {
                //       parameters: 'first'
                //     }
                //   }
                // ],
                // TODO: regular indent is unnecessary w/ prettier, what about this one?? ^^^
                // '@typescript-eslint/member-delimiter-style': [
                //   'error',
                //   {
                //     multiline: {
                //       delimiter: 'semi',
                //       requireLast: true
                //     },
                //     singleline: {
                //       delimiter: 'semi',
                //       requireLast: false
                //     }
                //   }
                // ],
                // TODO: not needed w/ prettier ?? ^^
                '@typescript-eslint/naming-convention': 'error',
                '@typescript-eslint/no-empty-function': 'off',
                '@typescript-eslint/no-empty-interface': 'error',
                '@typescript-eslint/no-explicit-any': 'off',
                '@typescript-eslint/no-inferrable-types': 'off',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-assertion': 'error',
                '@typescript-eslint/no-parameter-properties': 'off',
                '@typescript-eslint/no-unused-expressions': 'error',
                '@typescript-eslint/no-use-before-define': 'off',
                '@typescript-eslint/no-var-requires': 'off',
                '@typescript-eslint/prefer-for-of': 'error',
                '@typescript-eslint/prefer-function-type': 'error',
                '@typescript-eslint/prefer-namespace-keyword': 'error',
                // '@typescript-eslint/quotes': ['error', 'single'],
                // TODO: not needed w/ prettier ?? ^^
                // '@typescript-eslint/semi': ['error', 'always'],
                // TODO: regular semi rule is unnecessary w/ prettier, what about this one?? ^^^
                '@typescript-eslint/triple-slash-reference': [
                    'error',
                    {
                        path: 'always',
                        types: 'prefer-import',
                        lib: 'always'
                    }
                ],
                // '@typescript-eslint/type-annotation-spacing': 'error',
                // TODO: not needed w/ prettier ?? ^^
                '@typescript-eslint/unified-signatures': 'error',
                 */
                // 'arrow-body-style': 'error',
                // TODO: NOTE -- 'arrow-body-style' and 'prefer-arrow-callback' are potentially problemeatic
                // x     when used with eslint-plugin-prettier
                // 'arrow-parens': ['error', 'as-needed'],
                // TODO: not needed w/ prettier ?? ^^
                // 'brace-style': ['error', '1tbs'],
                // TODO: not needed w/ prettier ?? ^^
                camelcase: 'error',
                complexity: 'error',
                'consistent-return': 'error',
                'constructor-super': 'error',
                curly: 'error',
                // TODO: don't use curly with "multi-line" or "multi-or-nest" option
                // 'eol-last': 'error',
                // TODO: not needed w/ prettier ?? ^^
                eqeqeq: ['error', 'smart'],
                'guard-for-in': 'error',
                'id-blacklist': [
                    'error',
                    'any',
                    'Number',
                    'number',
                    'String',
                    'string',
                    'Boolean',
                    'boolean',
                    'Undefined',
                    'undefined'
                ],
                'id-match': 'error',
                'import/no-deprecated': 'warn',
                'import/order': 'error',
                // 'import/no-internal-modules': 'error',
                // TODO: ^^^ bring back for the ng-10 version (b/c uses TS 3+ ---> this rule is b/c internal-module imports is replaced w/ project references)
                // TODO: ^^^ see here: https://www.typescriptlang.org/docs/handbook/project-references.html
                'jsdoc/check-alignment': 'error',
                'jsdoc/newline-after-description': 'error',
                'jsdoc/no-types': 'error',
                'max-classes-per-file': 'error',
                'no-bitwise': 'error',
                'no-caller': 'error',
                'no-cond-assign': 'error',
                'no-confusing-arrow': 'error',
                // TODO: no-confusing-arrow may be useful w/ prettier, double-check readme
                'no-console': ['error', { allow: ['error'] }],
                'no-debugger': 'error',
                'no-empty': 'off',
                'no-eval': 'error',
                'no-invalid-this': 'off',
                'no-labels': 'error',
                'no-new-wrappers': 'error',
                'no-shadow': [
                    'error',
                    {
                        hoist: 'all'
                    }
                ],
                'no-throw-literal': 'error',
                // 'no-trailing-spaces': 'error',
                // TODO: not needed w/ prettier ?? ^^
                'no-undef-init': 'error',
                'no-underscore-dangle': 'error',
                'no-unsafe-finally': 'error',
                'no-unused-labels': 'error',
                'no-var': 'error',
                'object-shorthand': 'error',
                'one-var': ['error', 'never'],
                'prefer-arrow/prefer-arrow-functions': 'error',
                'prefer-const': 'error',
                radix: 'error',
                'spaced-comment': [
                    'warn',
                    'always',
                    {
                        markers: ['/']
                    }
                ],
                'use-isnan': 'error',
                'valid-typeof': 'off'
            }
        },
        {
            files: ['*.ts'],
            plugins: ['@angular-eslint'],
            parser: '@typescript-eslint/parser',
            parserOptions: {
                ecmaVersion: 6,
                project: 'tsconfig.json',
                tsconfigRootDir: __dirname // ,
                // sourceType: module,
                // ecmaFeatures: {
                //     modules: true
                // }
            },
            extends: [
                'plugin:@typescript-eslint/recommended',
                'plugin:@typescript-eslint/recommended-requiring-type-checking',
                'plugin:@angular-eslint/recommended',
                'prettier/@typescript-eslint',
                'plugin:import/typescript'
            ],
            rules: {
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/array-type': ['error', { default: 'array', readonly: 'array' }],
                '@typescript-eslint/ban-types': [
                    'error',
                    {
                        types: {
                            Object: {
                                message: 'Avoid using the `Object` type. Did you mean `object`?'
                            },
                            Function: {
                                message:
                                    'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.'
                            },
                            // eslint-disable-next-line id-blacklist
                            Boolean: {
                                message: 'Avoid using the `Boolean` type. Did you mean `boolean`?'
                            },
                            // eslint-disable-next-line id-blacklist
                            Number: {
                                message: 'Avoid using the `Number` type. Did you mean `number`?'
                            },
                            // eslint-disable-next-line id-blacklist
                            String: {
                                message: 'Avoid using the `String` type. Did you mean `string`?'
                            },
                            Symbol: {
                                message: 'Avoid using the `Symbol` type. Did you mean `symbol`?'
                            }
                        }
                    }
                ],
                '@typescript-eslint/consistent-type-assertions': 'error',
                '@typescript-eslint/consistent-type-definitions': 'error',
                '@typescript-eslint/dot-notation': 'error',
                '@typescript-eslint/explicit-member-accessibility': [
                    'error',
                    {
                        accessibility: 'explicit',
                        overrides: {
                            constructors: 'no-public'
                        }
                    }
                ],
                '@typescript-eslint/naming-convention': 'error',
                '@typescript-eslint/no-empty-function': 'off',
                '@typescript-eslint/no-empty-interface': 'error',
                '@typescript-eslint/no-explicit-any': 'off',
                '@typescript-eslint/no-inferrable-types': 'off',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-assertion': 'error',
                '@typescript-eslint/no-parameter-properties': 'off',
                '@typescript-eslint/no-unused-expressions': 'error',
                '@typescript-eslint/no-use-before-define': 'off',
                '@typescript-eslint/no-var-requires': 'off',
                '@typescript-eslint/prefer-for-of': 'error',
                '@typescript-eslint/prefer-function-type': 'error',
                '@typescript-eslint/prefer-namespace-keyword': 'error',
                '@typescript-eslint/triple-slash-reference': [
                    'error',
                    {
                        path: 'always',
                        types: 'prefer-import',
                        lib: 'always'
                    }
                ],
                '@typescript-eslint/unified-signatures': 'error'
            },
            settings: {
                jsdoc: {
                    mode: 'typescript'
                }
            }
        }
    ]
};

// TODO: maybe use overrides w/ the (*.ts) vs (*.ts + *.js) ---> so that it uses default parser for .js files???
